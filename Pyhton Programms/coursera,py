
# # #!/usr/bin/env python3
# # from multiprocessing import Pool
# # def run(task):
# #   # Do something with task here
# #     print("Handling {}".format(task))
# # if __name__ == "__main__":
# #   tasks = ['task1', 'task2', 'task3']
# #   # Create a pool of specific number of CPUs
# #   p = Pool(len(tasks))
# #   # Start each task within the pool
# #   p.map(run, tasks)
  
  
  
# # #!/usr/bin/env python
# # import subprocess
# # import os
# # from multiprocessing import Pool
# # src = "/data/prod/"
# # dest = "/data/prod_backup/"
# # for root, dirs, files in os.walk(src, topdown=False):
# #     p = Pool(len(files))
# #     p.run(subprocess.call(["rsync", "-arq", src, dest]))
# #    for name in files:
# #       src = (os.path.join(root, name))
# #    for name in dirs:
# #       src = (os.path.join(root, name))

# # subprocess.call(["rsync", "-arq", src, dest])

# # !/usr/bin/env python
# # import subprocess
# # import os
# # from multiprocessing import Pool
# # src = "/data/prod/"
# # dest = "/data/prod_backup/"

# # def sync_data(data):
# #     subprocess.run(['rsync', '-arq', data, dest])

# # if __name__ == '__main__':
# #     data_files = []
# #     for root, dirs, files in os.walk(src):
# #         for file in files:
# #             data_files.append(os.path.join(root, file))
# #     print(data_files)
# #     p = Pool()
# #     p.map(sync_data, data_files)

# # #!/usr/bin/env python3

# # from multiprocessing import Pool
# # import os
# # import subprocess

# # src = "/home/student-03-0aa00e08a66d/data/prod"
# # dirs = next(os.walk(src))[1]

# # def backingup(dirs):
# #     dest = "/home/student-03-0aa00e08a66d/data/prod_backup"
# #     subprocess.call(["rsync", "-arq", src+'/'+ dirs, dest])

# # p = Pool(len(dirs))
# # p.map(backingup, dirs)

# #!/usr/bin/env python3


#!/usr/bin/env python3
import csv
import datetime
import requests
 
FILE_URL = "https://storage.googleapis.com/gwg-content/gic215/employees-with-date.csv"

 
def get_start_date():
  """Interactively get the start date to query for."""
 
  print()
  print('Getting the first start date to query for.')
  print()
  print('The date must be greater than Jan 1st, 2018')
  year = int(input('Enter a value for the year: '))
  month = int(input('Enter a value for the month: '))
  day = int(input('Enter a value for the day: '))
  print()
 
  return datetime.datetime(int(year), int(month), int(day))
 
def get_file_lines(url):
  """Returns the lines contained in the file at the given URL"""
 
  # Download the file over the internet
  response = requests.get(url, stream=True)
 
  # Decode all lines into strings
  lines = []
  for line in response.iter_lines():
    lines.append(line.decode("UTF-8"))
  return lines
 
my_data = get_file_lines(FILE_URL)

def get_same_or_newer(start_date):
  """Returns the employees that started on the given date, or the closest one."""
  date_time = [[datetime.datetime.strptime(k[3], '%Y-%m-%d'), k[0], k[1], k[2]] for k in [data.split(',') for data in my_data[1:]]]
  date_time.sort()
  sorted_by_date = [','.join([i[1], i[2], i[3], str(i[0]).split()[0]]) for i in date_time]
  sorted_by_date.insert(0, my_data[0])
  data = sorted_by_date
  reader = csv.reader(data[1:])
 
  # We want all employees that started at the same date or the closest newer
  # date. To calculate that, we go through all the data and find the
  # employees that started on the smallest date that's equal or bigger than
  # the given start date.
  min_date = datetime.datetime.today()
  min_date_employees = []
  for row in reader:
    row_date = datetime.datetime.strptime(row[3], '%Y-%m-%d')
 
    # If this date is smaller than the one we're looking for,
    # we skip this row
    if row_date < start_date:
      continue
 
    # If this date is smaller than the current minimum,
    # we pick it as the new minimum, resetting the list of
    # employees at the minimal date.
    if row_date < min_date:
      min_date = row_date
      min_date_employees = []
 
    # If this date is the same as the current minimum,
    # we add the employee in this row to the list of
    # employees at the minimal date.
    if row_date == min_date:
      min_date_employees.append("{} {}".format(row[0], row[1]))
 
  return min_date, min_date_employees
 
def list_newer(start_date):
  while start_date < datetime.datetime.today():
    start_date, employees = get_same_or_newer(start_date)
    print("Started on {}: {}".format(start_date.strftime("%b %d, %Y"), employees))
 
    # Now move the date to the next one
    start_date = start_date + datetime.timedelta(days=1)
 
def main():
  start_date = get_start_date()
  list_newer(start_date)
 
if __name__ == "__main__":
  main()

# answer_yes = ["Yes", "Y", "yes", "y"]
# answer_no = ["No", "N", "no", "n"]

# print("""
# WELCOME! LET'S START THE ADVENTURE

# You are standing outside of your house and you see a man running towards you and asking for urgent shelter.

# Will you provide shelter to him. (Yes / No)
# """)

# ans1 = input(">>")

# if ans1 in answer_yes:
#     print("\nAfter 2 minutes, the Police came to your house, and ask you that whether the thief is in your house or not. Will you say (Yes / No)\n")

#     ans2 = input(">>")

#     if ans2 in answer_yes:
#         print("\nYou are an honest person. He was a thief & You won the Game")

#     elif ans2 in answer_no:
#         print("\nYou helped a thief. Now, go to Jail. GAME OVER")

#     else:
#         print("\nYou typed the wrong input. GOODBYE!")

# elif ans1 in answer_no:
#     print("\nNow, he is trying to kill you. Will, you knock him down? (Yes / No)\n")

#     ans3 = input(">>")

#     if ans3 in answer_yes:
#         print("\nCongrats! He was a thief & You helped the police to catch him with your bravery.")

#     elif ans3 in answer_no:
#         print("\nSorry! You are dead. He was a thief & He killed you. GAME OVER")

#     else:
#         print("\nYou typed the wrong input. GOODBYE!")

# else:
#     print("\nYou typed the wrong input. GOODBYE!")